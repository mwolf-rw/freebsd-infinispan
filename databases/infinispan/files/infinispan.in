#!/bin/sh

# $FreeBSD$
#
# PROVIDE: %%PORTNAME%%
# REQUIRE: NETWORKING SERVERS
# KEYWORD: shutdown
#
# Add these following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# %%PORTNAME%%_enable (bool):    Set it to YES to enable %%PORTNAME%% on startup.
#                              Default: NO
# %%PORTNAME%%_user (string):    User account to run with.
#                              Default: %%PORTNAME%%_user
# %%PORTNAME%%_servers (string): Named servers that should be started.
#                              Default: server
# %%PORTNAME%%_flags (string):   Additional flags for the startup script.
#

. /etc/rc.subr

name=%%PORTNAME%%
rcvar=%%PORTNAME%%_enable
desc="Scalable key/value data store and data grid"
extra_commands=status

load_rc_config $name

: ${%%PORTNAME%%_enable:=NO}
: ${%%PORTNAME%%_user:=%%USER%%}
: ${%%PORTNAME%%_group:=%%GROUP%%}
: ${%%PORTNAME%%_server_offset:=100}
: ${%%PORTNAME%%_servers:=server}
: ${%%PORTNAME%%_flags:=""}

start_cmd="%%PORTNAME%%_start"
status_cmd="%%PORTNAME%%_status"
stop_cmd="%%PORTNAME%%_stop"

%%PORTNAME%%_start()
{
	local pid_daemon
	local server_offset

	if [ ! -d "%%DB_DIR%%" ]; then
		install -d -o ${%%PORTNAME%%_user} %%DB_DIR%%
	fi
	if [ ! -d "%%LOG_DIR%%" ]; then
		install -d -o ${%%PORTNAME%%_user} %%LOG_DIR%%
	fi
	if [ ! -d "%%RUN_DIR%%" ]; then
		install -d -o ${%%PORTNAME%%_user} %%RUN_DIR%%
	fi

	server_offset=0

	for s in ${%%PORTNAME%%_servers}; do
		if [ ! -d "%%DB_DIR%%/${s}" ]; then
			cp -Rp %%JAVASHAREDIR%%/%%PORTNAME%%/server-default "%%DB_DIR%%/${s}"
			mkdir -p "%%LOG_DIR%%/${s}"

			ln -sf "%%DB_DIR%%/${s}" "%%JAVASHAREDIR%%/%%PORTNAME%%/${s}"
			ln -sf "%%LOG_DIR%%/${s}" "%%DB_DIR%%/${s}/log"

			chown -R ${%%PORTNAME%%_user}:${%%PORTNAME%%_group} "%%DB_DIR%%/${s}" "%%LOG_DIR%%/${s}"
		fi

		pid_daemon=$(check_pidfile %%RUN_DIR%%/%%PORTNAME%%_${s}_daemon.pid /usr/sbin/daemon)
		if [ ! -z "${pid_daemon}" ]; then
			echo "%%PORTNAME%% already running? (pid=${pid_daemon})."
			continue
		fi

		echo "Starting %%PORTNAME%% instance ${s}."

		(cd %%JAVASHAREDIR%%/%%PORTNAME%% && /usr/bin/env ISPN_PIDFILE=%%RUN_DIR%%/%%PORTNAME%%_${s}.pid \
			/usr/sbin/daemon -u ${%%PORTNAME%%_user} -R 60 \
			-o %%LOG_DIR%%/%%PORTNAME%%_${s}.log -t "%%PORTNAME%% [${s}]" -P %%RUN_DIR%%/%%PORTNAME%%_${s}_daemon.pid \
			%%JAVASHAREDIR%%/%%PORTNAME%%/bin/server.sh \
			-o ${server_offset} -s ${s} \
			${%%PORTNAME%%_flags} || return $?) || return $?
		server_offset=$((server_offset + ${%%PORTNAME%%_server_offset}))
	done
}

%%PORTNAME%%_status()
{
	local pid_child
	local %%PORTNAME%%_status

	%%PORTNAME%%_status=0

	for s in ${%%PORTNAME%%_servers}; do
		pid_child=$(check_pidfile %%RUN_DIR%%/%%PORTNAME%%_${s}.pid %%JAVA%%)

		if [ -z "${pid_child}" ]; then
			echo "%%PORTNAME%% instance ${s} is not running."
			%%PORTNAME%%_status=3
		else
			echo "%%PORTNAME%% instance ${s} is running."
		fi
	done

	return ${%%PORTNAME%%_status}
}

%%PORTNAME%%_stop()
{
	local pid_daemon
	local pid_child
	local pid_list

	echo "Stopping %%PORTNAME%%."

	pid_list=""

	for s in ${%%PORTNAME%%_servers}; do
		pid_daemon=$(check_pidfile "%%RUN_DIR%%/%%PORTNAME%%_${s}_daemon.pid" /usr/sbin/daemon)
		if [ ! -z "${pid_daemon}" ]; then
			kill -TERM ${pid_daemon}
		fi

		pid_child=$(check_pidfile "%%RUN_DIR%%/%%PORTNAME%%_${s}.pid" %%JAVA%%)
		if [ ! -z "${pid_child}" ]; then
			kill -TERM ${pid_child}
			rm -f "%%RUN_DIR%%/%%PORTNAME%%_${s}.pid"
		fi

		pid_list="${pid_list} ${pid_daemon} ${pid_child}"
	done

	wait_for_pids ${pid_list}
}

run_rc_command "$1"
